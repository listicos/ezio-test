/* -----------------------------------------------------------------------------
 *
 *     Copyright (c) 2015  -  GEMALTO DEVELOPMENT - R&D
 *
 * -----------------------------------------------------------------------------
 * GEMALTO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. GEMALTO SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 *
 * THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
 * CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
 * PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
 * NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
 * SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
 * SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
 * PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). GEMALTO
 * SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
 * HIGH RISK ACTIVITIES.
 *
 * -----------------------------------------------------------------------------
 */

#import <Foundation/Foundation.h>
#import "EMSecureString.h"

/**
 @discussion In the Ezio Mobile SDK, some sensitive functionalities are represented by the EMPasswordDomain. Each element of the enum EMPasswordDomainType represents a specific set of functionalities. Before these functionalities can be used, they must first be unlocked.
 
 The Password Manager is a high level interface that allows to set a single password to manage all the EMPasswordDomain at the same time.
 
 **Using User-defined Password**
 <ol>
 <li>
 @discussion **Set a password.** The first step when using the EMPasswordManager is to set a password. The password should be provided by an outside source (the application user, through a secured communication channel with a server, etc.).
 
 <pre>
 // Assumptions
 // get PasswordManager from EMEzioMobileContext and assign it to 'passwordManager'
 // then...
 BOOL isSetResult = [passwordManager isPasswordSet:&error];
 if (!isSetResult) {
 // manage error here
 }else{
 // get password and store it in 'userProvidedPassword' string or data.
 // get EMSecureDataFactory from EzioMobileContext and assign it to 'secureDataFactory'
 EMSecureString password = [secureDataFactory secureStringWithString:userProvidedPassword];
 BOOL result = [passwordManager setPassword:&error];
 if (!result) {
 // manage error here
 }
 }
 </pre>
 </li>
 <li>
 @discussion **Login.** Next, you simply need to login using -loginWithPassword:error: or its asynchronous equivalent -loginWithPassword:completionHandler: to unlock all functionalities represented by the EMPasswordDomain. The EMPasswordManager will remain logged in until -logout: is called.
 
 </li>
 </ol>
 
 **No Password**<br />
 <ol>
 <li>
 @discussion If you wish to use the functionalities represented by the EMPasswordDomain without the use of a password, use -login: or its asynchronous equivalent â€“loginWithCompletionHandler: to login without using a password. As long as no password was set, you can call -login: without needing to provide a password.
 </li>
 </ol>
 
 <li>
 Usage of the SDK without setting a proper password is strongly discouraged as it introduces a serious security
 weakness in your application. Note that as long as the -login:, -loginWithPassword:completionHandler:,
 -removePassword:error: or -removePassword:completionHandler:  methods are
 never used, no security weakness will be introduced even if the password is not yet set.
 </li>
 <li>
 Password domains are protected with passwords and reside in the `Documents` directory of an your application container. **Be very careful when managing local files as this will have severe impact on the SDK's operations** such as when those files generated by the SDK are accidentally deleted using `NSFileManager`.
 </li>
 <li>
 Tasks can take considerable amount of time and may potentially block the UI if executed on the main thread.
 </li>
 </ul>
 
 @discussion Also see: EMEzioMobileContext, EMPasswordDomain
 
 @since 3.0
 */

@protocol EMPasswordManager <NSObject>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Passwords management
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @name Setting a password */
/**
 * Sets the global password.
 *
 * It actually creates the password for password ID which was initially created without the password.
 *
 * @param aPassword The global password value to set.
 * @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 *
 * @return `YES` if password was set, `NO` otherwise.
 *
 * @since 3.0
 */
- (BOOL)setPassword:(id<EMSecureString>)aPassword
              error:(NSError **)anError;

/**
 * Checks if the global password is set.
 *
 * @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 *
 * @return `YES` if password was created, `NO` otherwise.
 *
 * @since 3.0
 */
- (BOOL)isPasswordSet:(NSError **)anError;

/** @name Changing password */
/**
 * Changes the global password.
 *
 * @param anOldPassword The old password to be verified to grant the password change.
 * @param aNewPassword The new password to be applied.
 * @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 *
 * @return `YES` if password was changed, `NO` otherwise.
 *
 * @since 3.0
 */
- (BOOL)changePassword:(id<EMSecureString>)anOldPassword
           newPassword:(id<EMSecureString>)aNewPassword
                 error:(NSError **)anError;

/** @name Removing password */
/**
 * Removes the password. This means that it is now possible to login to the password manager with no password.
 *
 * After clearing the password, the resource which was originally protected by password will become accessible w/o
 * any protection.
 *
 * @param anOldPassword The old password to be verified to grant the password change.
 * @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 *
 * @return `YES` if password was cleared, `NO` otherwise.
 *
 * @since 3.0
 */
- (BOOL)removePassword:(id<EMSecureString>)anOldPassword
                 error:(NSError **)anError;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Currently entered password to allow the secure accesses
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @name Logging in/out */
/**
 * Checks if the global password is logged in.
 *
 * @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 *
 * @return `YES` if logged in, `NO` otherwise.
 *
 * @since 3.0
 */
- (BOOL)isLoggedIn:(NSError **)anError;

/**
 * Logs in with the global password ID in order to allow the secure accesses related to all password
 * domain(s).
 *
 * @param aPassword The previously set password.
 * @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 *
 * @return `YES` if password was entered, `NO` otherwise.
 *
 * @since 3.0
 */
- (BOOL)loginWithPassword:(id<EMSecureString>)aPassword
                    error:(NSError **)anError;

/**
 * Logs out/wipes the global password.
 *
 * No more secured accesses will be granted.
 *
 * @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 *
 * @return `YES` if the specified password has been logged out, `NO` otherwise.
 *
 * @since 3.0
 */
- (BOOL)logout:(NSError **)anError;

/**
 Lets the password manager clearly know that the entire system should NOT be password protected at all.
 Synchronous variant.
 
 If password protection is false, do not call any other from this class.
 
 @warning This method blocks the calling thread for a significant amount of time (up-to one second).
 
 @param anError If an error occurs, upon return contains an NSError object that describes the problem. If you are not interested in possible errors, you may pass in `NULL`.
 
 @return The result of the operation.
 
 @since 3.0
 */
- (BOOL)login:(NSError **)anError;

@end
