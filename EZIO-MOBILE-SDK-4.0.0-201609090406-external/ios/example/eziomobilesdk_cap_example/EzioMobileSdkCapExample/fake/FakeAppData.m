/* -----------------------------------------------------------------------------
 *
 *     Copyright (c)  2014  -  GEMALTO DEVELOPEMENT - R&D
 *
 * -----------------------------------------------------------------------------
 * GEMALTO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. GEMALTO SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 *
 * THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
 * CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
 * PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
 * NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
 * SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
 * SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
 * PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). GEMALTO
 * SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
 * HIGH RISK ACTIVITIES.
 *
 * -----------------------------------------------------------------------------
 */

#import "FakeAppData.h"

@implementation FakeAppData

/**
 * Replace this URL with your EPS URL.
 */
+(NSString *)epsUrl
{
    return @"https://localhost/provisioner/api/provisioning/pp";
}

/**
 * Replace this string with your own EPS key ID.
 *
 * This is specific to the configuration of the bank's system. Therefore
 * other values should be used here.
 */
+(NSString *)rsaKeyId
{
    return @"default-eps-certificate";
}

/**
 * Replace this byte array with your own EPS key modulus.
 *
 * The EPS' RSA modulus. This is specific to the configuration of the
 * bank's system.  Therefore other values should be used here.
 */
+(NSData *)rsaKeyModulus
{
    // Security Guideline: GEN13. Integrity of public keys
    // Since this example hard codes the key and does not load it from a
    // file, this guideline is skipped.
    
    // Security Guideline: GEN17. RSA key length
    // 2048 bit key
    unsigned char rawRsa[] = {
        0x00, 0xAF, 0x0C, 0xD8, 0x8F, 0x22, 0x9C, 0xAD,
        0x29, 0xF0, 0x4F, 0x3A, 0x5C, 0x1C, 0xD4, 0xAC,
        0x20, 0xC7, 0x94, 0x50, 0xC4, 0x2E, 0x21, 0x8D,
        0xA9, 0x4D, 0x83, 0x21, 0x58, 0xF5, 0xEC, 0x73,
        0x7B, 0x41, 0xC2, 0xD3, 0x50, 0x90, 0x79, 0x81,
        0xFD, 0xBC, 0x9D, 0x2E, 0x47, 0x3B, 0xFA, 0x6E,
        0x20, 0xBC, 0x2E, 0xF8, 0x9E, 0x4B, 0x32, 0x09,
        0x27, 0x62, 0xE1, 0x43, 0x46, 0xC8, 0x54, 0x09,
        0x40, 0x34, 0xE6, 0x93, 0xFA, 0xE5, 0xFC, 0x4C,
        0x18, 0xA6, 0x17, 0x8C, 0x6A, 0x3D, 0xD7, 0xCC,
        0x41, 0x8A, 0xC7, 0xDF, 0x7B, 0x2D, 0xD4, 0x89,
        0xFE, 0x3C, 0x70, 0xFB, 0xE6, 0xB4, 0x5E, 0x88,
        0xC6, 0x63, 0x5E, 0x74, 0x70, 0x74, 0xB3, 0xFF,
        0x6D, 0x62, 0x73, 0x4D, 0x59, 0x41, 0xFE, 0x39,
        0x8F, 0x3D, 0x5F, 0xED, 0xF7, 0xFC, 0xE0, 0x52,
        0x22, 0xF6, 0x26, 0x97, 0x3B, 0x2E, 0x13, 0xD0,
        0xA7, 0x52, 0x95, 0xBE, 0xD3, 0x1B, 0x9D, 0xE4,
        0xFA, 0x8E, 0x93, 0x3C, 0x63, 0xAF, 0x63, 0x6D,
        0xAE, 0x1A, 0x68, 0x6F, 0x55, 0x41, 0x7E, 0x78,
        0x73, 0x2A, 0x0B, 0xC7, 0xA6, 0x16, 0x03, 0x86,
        0x5B, 0x3F, 0x0A, 0xF9, 0xF3, 0xD1, 0xC5, 0x73,
        0x2C, 0x1C, 0x44, 0x64, 0x36, 0x03, 0x86, 0x71,
        0x02, 0x51, 0x64, 0x16, 0x23, 0x2E, 0xE4, 0x8D,
        0xF5, 0x20, 0x97, 0x59, 0x90, 0xFE, 0xE3, 0x3E,
        0xBC, 0x75, 0x86, 0x25, 0x50, 0x99, 0x26, 0x15,
        0x62, 0x32, 0x23, 0xFB, 0x3D, 0x1C, 0x39, 0xF7,
        0x75, 0xE9, 0x89, 0x10, 0x52, 0x73, 0x65, 0x37,
        0x02, 0x98, 0x8A, 0xA2, 0x3F, 0x20, 0xF6, 0xB6,
        0x64, 0xF9, 0x9D, 0xBD, 0x30, 0xD0, 0x7F, 0xB5,
        0x85, 0x06, 0x1E, 0x28, 0x67, 0xA3, 0x57, 0x21,
        0xE1, 0x7D, 0x5E, 0x74, 0xD0, 0xA2, 0xFF, 0x6D,
        0x19, 0x76, 0x2E, 0x5A, 0xC9, 0x50, 0x16, 0x87,
        0xB5,
    };
    
    return [NSData dataWithBytes:rawRsa length:sizeof(rawRsa)];
}

/**
 * Replace this byte array with your own EPS key exponent.
 *
 * The EPS' RSA exponent. This is specific to the configuration of the
 * bank's system.  Therefore other values should be used here.
 */
+(NSData *)rsaKeyExponent
{
    // Security Guideline: GEN13. Integrity of public keys
    // Since this example hard codes the key and does not load it from a
    // file, this guideline is skipped.
    unsigned char raw[] = { 0x01, 0x00, 0x01 };
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

/**
 * The custom fingerprint data that seals all the token credentials in this
 * example.
 *
 * This data does not need to be modified in order to use this example app.
 */
+(NSData *)customFingerprintData
{
    // This example simply uses the bundle identifier.
    //
    // This is one example of possible data that can be used for the custom
    // data. It provides domain separation so that the data stored by the
    // Ezio Mobile SDK is different for this application than it would be
    // for another bank's application. More data can be appended to
    // further improve the fingerprinting.
    return [@"com.gemalto.ezio.mobile.EzioMobileSdkExample" dataUsingEncoding:NSUTF8StringEncoding];
}

/**
 * Replace this byte array with activation code.
 *
 * The VIC feature activation code.
 */
+ (NSData *)activationVicEnabledSecurePinpadDisabled
{
    unsigned char raw[] = { 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01};
    
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

+ (NSData*) activationAllEnabled {
    
    unsigned char raw[] = { 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01};
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

@end
