/* -----------------------------------------------------------------------------
 *
 *     Copyright (c)  2013  -  GEMALTO DEVELOPEMENT - R&D
 *
 * -----------------------------------------------------------------------------
 * GEMALTO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. GEMALTO SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 *
 * THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
 * CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
 * PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
 * NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
 * SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
 * SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
 * PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). GEMALTO
 * SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
 * HIGH RISK ACTIVITIES.
 *
 * -----------------------------------------------------------------------------
 */

#import "FakeUI.h"

@implementation FakeUI

/**
 * Fake UI for prompting the user for the account name (i.e. Token name).
 *
 * Replace the autogenerated name if desired.
 */
+ (NSString *)promptForAccountName {
    
    // The account name, which will be the token name, must be unique. Use
    // simple names but find one that is available first.
    EMOtpModule *otpModule = [EMOtpModule otpModule];
    EMOathService *oathService = [EMOathService serviceWithModule:otpModule];
    id<EMTokenManager> tokenManager = [oathService tokenManager:nil];
    NSSet *names = [tokenManager tokenNames:nil];
    
    char name = 'A';
    while ([names containsObject:[NSString stringWithFormat:@"%c", name]])
    {
        name += 1;
    }
    return [NSString stringWithFormat:@"%c", name];
}

@end
